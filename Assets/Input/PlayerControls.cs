//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""DialogControl"",
            ""id"": ""41a12ae9-fd33-447a-881c-3180e8d2dd1a"",
            ""actions"": [
                {
                    ""name"": ""NextSentence"",
                    ""type"": ""Button"",
                    ""id"": ""7e342f5d-0477-4147-a382-a220bd01a5f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkipSentence"",
                    ""type"": ""Button"",
                    ""id"": ""704f6f65-603f-405b-9f5d-0e2f81480d6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9e834ae5-84a2-460e-8c95-6c30dc1b086e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""NextSentence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b72a00a-c58a-4b3b-bd39-8c9134758fb5"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""NextSentence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35b515a0-186a-46e6-90bf-9cbbab749b31"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""SkipSentence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7160b2e4-efb7-457c-9fe0-d03dccc2da8e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SkipSentence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerControl"",
            ""id"": ""91deaa38-014c-4a32-9e0f-072392f9164f"",
            ""actions"": [
                {
                    ""name"": ""EventInteraction"",
                    ""type"": ""Button"",
                    ""id"": ""866d23f7-e9e5-41f7-a8cf-ab2a03d29755"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0bba2bd9-bf44-491c-a44e-390b7f7c2397"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""EventInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""505e31c9-dd1f-4060-a991-6db84121ee4f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""EventInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // DialogControl
        m_DialogControl = asset.FindActionMap("DialogControl", throwIfNotFound: true);
        m_DialogControl_NextSentence = m_DialogControl.FindAction("NextSentence", throwIfNotFound: true);
        m_DialogControl_SkipSentence = m_DialogControl.FindAction("SkipSentence", throwIfNotFound: true);
        // PlayerControl
        m_PlayerControl = asset.FindActionMap("PlayerControl", throwIfNotFound: true);
        m_PlayerControl_EventInteraction = m_PlayerControl.FindAction("EventInteraction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DialogControl
    private readonly InputActionMap m_DialogControl;
    private IDialogControlActions m_DialogControlActionsCallbackInterface;
    private readonly InputAction m_DialogControl_NextSentence;
    private readonly InputAction m_DialogControl_SkipSentence;
    public struct DialogControlActions
    {
        private @PlayerControls m_Wrapper;
        public DialogControlActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextSentence => m_Wrapper.m_DialogControl_NextSentence;
        public InputAction @SkipSentence => m_Wrapper.m_DialogControl_SkipSentence;
        public InputActionMap Get() { return m_Wrapper.m_DialogControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogControlActions set) { return set.Get(); }
        public void SetCallbacks(IDialogControlActions instance)
        {
            if (m_Wrapper.m_DialogControlActionsCallbackInterface != null)
            {
                @NextSentence.started -= m_Wrapper.m_DialogControlActionsCallbackInterface.OnNextSentence;
                @NextSentence.performed -= m_Wrapper.m_DialogControlActionsCallbackInterface.OnNextSentence;
                @NextSentence.canceled -= m_Wrapper.m_DialogControlActionsCallbackInterface.OnNextSentence;
                @SkipSentence.started -= m_Wrapper.m_DialogControlActionsCallbackInterface.OnSkipSentence;
                @SkipSentence.performed -= m_Wrapper.m_DialogControlActionsCallbackInterface.OnSkipSentence;
                @SkipSentence.canceled -= m_Wrapper.m_DialogControlActionsCallbackInterface.OnSkipSentence;
            }
            m_Wrapper.m_DialogControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @NextSentence.started += instance.OnNextSentence;
                @NextSentence.performed += instance.OnNextSentence;
                @NextSentence.canceled += instance.OnNextSentence;
                @SkipSentence.started += instance.OnSkipSentence;
                @SkipSentence.performed += instance.OnSkipSentence;
                @SkipSentence.canceled += instance.OnSkipSentence;
            }
        }
    }
    public DialogControlActions @DialogControl => new DialogControlActions(this);

    // PlayerControl
    private readonly InputActionMap m_PlayerControl;
    private IPlayerControlActions m_PlayerControlActionsCallbackInterface;
    private readonly InputAction m_PlayerControl_EventInteraction;
    public struct PlayerControlActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerControlActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @EventInteraction => m_Wrapper.m_PlayerControl_EventInteraction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlActions instance)
        {
            if (m_Wrapper.m_PlayerControlActionsCallbackInterface != null)
            {
                @EventInteraction.started -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnEventInteraction;
                @EventInteraction.performed -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnEventInteraction;
                @EventInteraction.canceled -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnEventInteraction;
            }
            m_Wrapper.m_PlayerControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @EventInteraction.started += instance.OnEventInteraction;
                @EventInteraction.performed += instance.OnEventInteraction;
                @EventInteraction.canceled += instance.OnEventInteraction;
            }
        }
    }
    public PlayerControlActions @PlayerControl => new PlayerControlActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IDialogControlActions
    {
        void OnNextSentence(InputAction.CallbackContext context);
        void OnSkipSentence(InputAction.CallbackContext context);
    }
    public interface IPlayerControlActions
    {
        void OnEventInteraction(InputAction.CallbackContext context);
    }
}
